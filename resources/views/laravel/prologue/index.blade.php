@extends('layouts.mainLayout')

@section('content')



<div class="themes">
    <h1 class="themes__title">
        Первое знакомство
    </h1>
    <div class="theme">
        <h2 class="theme__title">Пролог</h2>
        <h3 class="theme__subtitle">Схема управления версиями</h3>
        <p class="theme__text">
            Laravel и другие его пакеты следуют семантическому управлению версиями: <br>
            - Основные выпуски фреймворка выпускаются каждые шесть месяцев (~ март и ~ сентябрь)<br>
            - Второстепенные релизы (minor releases) и патчи (patch releases ) могут выпускаться каждую неделю.<br>
            Незначительные релизы и патчи никогда не содержат критических изменений, что не скажешь о основных выпусках Laravel.
        </p>
        <h3 class="theme__subtitle">Политика поддержки</h3>
        <p class="theme__text">
            Для выпусков LTS исправления ошибок предоставляются на 2 года, а исправления безопасности  - на 3 года. Эти выпуски обеспечивают самый продолжительный период поддержки и обслуживания. <br>
            Для общих выпусков исправления ошибок предоставляются на 7 месяцев, а исправления безопасности - на 1 год. Для всех дополнительных библиотек, только последний выпуск получает исправления ошибок.
        </p>
    </div>
    <div class="theme">
        <h2 class="theme__title">Установка</h2>
        <h3 class="theme__subtitle">Установка Laravel</h3>
        <p class="theme__text">
            Laravel использует Composer для управления своими зависимостями, поэтому убедитесь, что на вашем компьютере установлен данный пакетный менеджер.
        </p>
        <h4 class="theme_subtitlex2">Установка с использованием установщика Laravel</h4>
        <p class="theme__text">
            1) Сначала загрузите установщик Laravel с помощью Composer: <br>
            composer global require laravel/installer <br>
            2) Выполните команду, которая создаст новый проект Laravel со всеми уже установленными зависимостями: <br>
            laravel new < название проекта > <br>
            laravel new blog.loc <br>
        </p>
        <h4 class="theme_subtitlex2">Установка с использованием  Composer</h4>
        <p class="theme__text">
            В качестве альтернативы вы также можете установить Laravel с использованием Composer: <br>
composer create-project --prefer-dist laravel/laravel < название проекта > <br>
composer create-project --prefer-dist laravel/laravel blog <br>
        </p>
        <h3 class="theme__subtitle">Локальный сервер для разработки</h3>
        <p class="theme__text">
            Если у вас установлен PHP локально и вы хотите использовать встроенный сервер разработки PHP для обслуживания своего приложения, вы можете использовать Artisan-команду serve: <br>
            php artisan serve<br>
            Эта команда запустит сервер разработки по адресу http: // localhost: 8000
        </p>
        <h3 class="theme__subtitle">Базовая настройка</h3>
        <h4 class="theme_subtitlex2">Публичная директория</h4>
        <p class="theme__text">
            После установки Laravel вы должны настроить веб-сервер так, чтобы корневой каталог веб-сайта была «public» папка. Index.php в этом каталоге служит фронт-контроллером для всех HTTP-запросов, поступающих в ваше приложение.
        </p>
        <h4 class="theme_subtitlex2">Файлы конфигурации</h4>
        <p class="theme__text">
            Все файлы конфигурации для фреймворка Laravel хранятся в каталоге config.
        </p>
        <h4 class="theme_subtitlex2">Права доступа к папкам</h4>
        <p class="theme__text">
            После установки Laravel вам может потребоваться настроить некоторые разрешения. Каталоги storage и bootstrap/cache должны быть доступны для записи вашим веб-сервером, иначе Laravel не запустится.<br>
            chmod 777 < путь до папки >
        </p>
        <h4 class="theme_subtitlex2">Ключ приложения</h4>
        <p class="theme__text">
            Следующее, что вам нужно сделать после установки Laravel, - это установить для ключа приложения случайную строку. Если вы установили Laravel через Composer или установщик Laravel, этот ключ уже был установлен для вас с помощью команды php artisan key: generate. <br>
            Обычно эта строка должна состоять из 32 символов. Ключ можно задать в файле среды .env. <br>
            Если ключ приложения не установлен, ваши пользовательские сеансы и другие зашифрованные данные не будут в безопасности!
        </p>
    </div>



    <div class="theme">
        <h3 class="theme__title">Структура папок</h3>
        <h3 class="theme__subtitle">The Root Directory</h3>
        <h4 class="theme_subtitlex2">The App Directory</h4>
        <p class="theme__text">
        Каталог app содержит код ядра вашего приложения . Почти все классы вашего приложения будут находится в этой папке.
        </p>
        <h4 class="theme_subtitlex2">
            The Bootstrap Directory
        </h4>
        <p class="theme__text">
            Каталог bootstrap содержит файлы, которые загружают фреймворк и настраивают автозагрузку. Также здесь содержится каталог cache, который содержит сгенерированные фреймворком файлы для оптимизации производительности — например, кэш-файлы роутов и сервисов.
        </p>
        <h4 class="theme_subtitlex2">The Config Directory</h4>
        <p class="theme__text">
            Каталог config, как гласит его название, содержит все конфигурационные файлы ваших приложений.
        </p>
        <h4 class="theme_subtitlex2">The Database Directory</h4>
        <p class="theme__text">
            Каталог database содержит миграции и классы для наполнения начальными данными вашей БД. При необходимости эту папку можно использовать для хранения базы данных SQLite.
        </p>
        <h4 class="theme_subtitlex2">The Public Directory</h4>
        <p class="theme__text">
            Каталог public содержит файл index.php, который является входной точкой для всех запросов, поступающих в ваше приложение. Также эта папка содержит ваши ресурсы, такие как изображения, JavaScript, CSS.
        </p>
        <h4 class="theme_subtitlex2">The Resources Directory</h4>
        <p class="theme__text">
            Каталог resources содержит ваши шаблоны, а также "сырые", некомпилированные ресурсы, такие как LESS, SASS, или JavaScript. А также здесь находятся все языковые файлы.
        </p>
        <h4 class="theme_subtitlex2">The Routes Directory</h4>
        <p class="theme__text">
            Каталог routes содержит все определения роутов вашего приложения. По умолчанию в Laravel встроено несколько файлов роутов: web.php, api.php, console.php и channels.php.<br>
Файл web.php содержит роуты, которые RouteServiceProvider помещает в группу посредников web, которая обеспечивает состояние сессии, CSRF-защиту и шифрование cookie. Если ваше приложение не предоставляет не имеющий своего состояния RESTful API, то скорее всего все ваши роуты можно определить в файле web.php.<br>
Файл api.php содержит роуты, которые RouteServiceProvider помещает в группу посредников api, которая обеспечивает ограничение скорости. Эти роуты должны быть не имеющими своего состояния, т.е. входящие через эти роуты запросы должны быть аутентифицированы с помощью токенов и они не будут иметь доступа к состоянию сессии.<br>
Файл console.php - то место, где вы можете определить все свои консольные команды на основе функций-замыканий. Каждая функция-замыкание привязывается к экземпляру команды, обеспечивая простое взаимодействие с методами ввода/вывода каждой команды. Несмотря на то, что в этом файле не определяются HTTP-роуты, в нём определяются консольные входные точки (пути) в ваше приложение.<br>
Файл channels.php - то место, где вы можете зарегистрировать все каналы вещания событий, поддерживаемые Вашим приложением.
        </p>

        <h4 class="theme_subtitlex2">The Storage Directory</h4>
        <p class="theme__text">
            Каталог storage содержит скомпилированные Blade-шаблоны, файлы сессий, кэши файлов и другие файлы, создаваемые фреймворком. Этот каталог делится на подкаталоги app, framework и logs. В каталоге app можно хранить любые файлы, генерируемые вашим приложением. В каталоге framework хранятся создаваемые фреймворком файлы и кэш. А в каталоге logs находятся файлы журналов приложения.<br>
Каталог storage/app/public можно использовать для хранения пользовательских файлов, таких как аватары (юзерпики) пользователей и т.п. загруженные изображения, которые должны быть доступны всем. Вам надо создать символьную ссылку на public/storage, которая ведёт к этому каталогу. Вы можете создать ссылку командой php artisan storage:link.

        </p>
        <h4 class="theme_subtitlex2">The Tests Directory</h4>
        <p class="theme__text">
            Каталог tests содержит ваши автотесты. Изначально там уже есть пример PHPUnit. Класс каждого теста должен иметь в имени суффикс Test. Вы можете запускать свои тесты командами phpunit или php vendor/bin/phpunit.
        </p>
        <h4 class="theme_subtitlex2">The Vendor Directory</h4>
        <p class="theme__text">
            Каталог vendor содержит ваши Composer-зависимости.
        </p>
        <h3 class="theme__subtitle">The App Directory</h3>
        <p class="theme__text">
            Основная часть вашего приложения находится в каталоге app. По-умолчанию этот каталог зарегистрирован под пространством имён App и автоматически загружается с помощью Composer по стандарту автозагрузки PSR-4.<br>
В каталоге app находится ряд дополнительных каталогов, таких как Console, Http и Providers. Можно сказать, что каталоги Console и Http предоставляют API ядра вашего приложения. Протокол HTTP и командная строка — это механизмы взаимодействия с вашим приложением, но они не содержат логики приложения. Другими словами, это просто два способа передачи команд вашему приложению. Каталог Console содержит все ваши Artisan-команды, а каталог Http содержит ваши контроллеры, посредники и запросы.<br>
Многие другие каталоги будут созданы в каталоге app, когда вы выполните Artisan-команду make для генерирования классов. Например, каталог app/Jobs не будет создан, пока вы не выполните Artisan-команду make:job, чтобы сгенерировать класс задачи.
Многие классы в каталоге app можно сгенерировать Artisan-командами. Для просмотра доступных команд выполните в терминале команду php artisan list make.
        </p>

        <h4 class="theme_subtitlex2">The Broadcasting Directory</h4>
        <p class="theme__text">
            Каталог Broadcasting содержит все классы каналов вещания для вашего приложения. Эти классы создаются с помощью команды make: channel. Этот каталог не существует по умолчанию, но будет создан для вас, когда вы создадите свой первый канал.
        </p>
        <h4 class="theme_subtitlex2">The Console Directory</h4>
        <p class="theme__text">
            Каталог Console содержит все дополнительные Artisan-команды для вашего приложения. Эти команды можно сгенерировать командой make:command. Также этот каталог содержит ядро вашей консоли, где регистрируются ваши дополнительные Artisan-команды и определяются ваши запланированные задачи.
        </p>
        <h4 class="theme_subtitlex2">The Events Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командами event:generate и make:event. В каталоге Events, как можно догадаться, хранятся классы событий. События можно использовать для оповещения других частей приложения о каком-либо событии, что обеспечивает большую гибкость и модульность.
        </p>
        <h4 class="theme_subtitlex2">The Exceptions Directory</h4>
        <p class="theme__text">
            Каталог Exceptions содержит обработчик исключений вашего приложения. Эта папка также является хорошим местом для размещения всех исключений, возникающих в вашем приложении. Если вы хотите изменить то, как журналируются и отображаются ваши исключения, вам надо изменить класс Handler в данном каталоге.
        </p>

        <h4 class="theme_subtitlex2">The Http Directory</h4>
        <p class="theme__text">
            Каталог Http содержит ваши контроллеры, посредники и запросы форм. Здесь будет размещена почти вся логика обработки запросов, входящих в приложение.
        </p>
        <h4 class="theme_subtitlex2">The Jobs Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командой make:job. В каталоге Jobs хранятся задачи для вашего приложения. Задачи могут быть обработаны вашим приложением в порядке очереди, а также их можно запустить синхронно в рамках прохождения текущего запроса. Иногда задачи, которые запускаются синхронно во время текущего запроса, называют "командами", потому что они реализуют шаблон Команда.
        </p>
        <h4 class="theme_subtitlex2">The Listeners Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командами event:generate или make:listener. Каталог Listeners содержит классы обработчиков для ваших собый.
            Слушатели событий получают экземпляр события и выполняют логику в ответ на это событие. Например, событие UserRegistered может быть обработано слушателем SendWelcomeEmail.
        </p>

        <h4 class="theme_subtitlex2">The Mail Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командой make:mail. Каталог Mail содержит все ваши классы, отвечающие за отправляемые вашим приложением email-сообщения. Почтовые объекты позволяют вам инкапсулировать всю логику создания email-сообщений в единый, простой класс, который можно отправить методом Mail::send.
        </p>
        <h4 class="theme_subtitlex2">The Models Directory</h4>
        <p class="theme__text">
            Каталог Models содержит все классы вашей модели Eloquent. Eloquent ORM, включенный в Laravel, предоставляет красивую и простую реализацию ActiveRecord для работы с вашей базой данных. Каждая таблица базы данных имеет соответствующую «Модель», которая используется для взаимодействия с этой таблицей. Модели позволяют запрашивать данные в таблицах, а также вставлять новые записи в таблицу.
        </p>
        <h4 class="theme_subtitlex2">The Notifications Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командой make:notification. Каталог Notificationsсодержит все "транзакционные" уведомления, которые отправляются вашим приложением, такие как простые уведомления о событиях, произошедших в вашем приложении. Возможность уведомлений в Laravel абстрагирует отправку уведомлений через разные драйверы, такие как email, Slack, SMS или сохранение в БД.
        </p>
        <h4 class="theme_subtitlex2">The Policies Directory</h4>
        <p class="theme__text">
            Изначально этого каталога нет, он создаётся Artisan-командой make:policy. Каталог Policies содержит классы политик авторизации. Политики служат для определения, разрешено ли пользователю данное действие над ресурсом.
        </p>
        <h4 class="theme_subtitlex2">The Providers Directory</h4>
        <p class="theme__text">
            Каталог Providers содержит все сервис-провайдеры для вашего приложения. Сервис-провайдеры загружают ваше приложение, добавляя сервисы в сервис-контейнер, регистрируя события, и выполняя любые другие задачи для подготовки вашего приложения к входящим запросам.<br>
            В свежеустановленном приложении Laravel эта папка уже содержит несколько провайдеров. При необходимости вы можете добавлять свои провайдеры в эту директорию.
        </p>
        <h4 class="theme_subtitlex2">The Rules Directory</h4>
        <p class="theme__text">
            Этот каталог не существует по умолчанию, но будет создан для вас, если вы выполните Artisan-команду make: rule. Каталог Rules содержит настраиваемые объекты правил проверки для вашего приложения. Правила используются для инкапсуляции сложной логики проверки в простой объект.
        </p>
    </div>
</div>



@endsection



